<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>sqli-labs29-32</title>
    <link href="/2020/05/25/sqli-labs29-32/"/>
    <url>/2020/05/25/sqli-labs29-32/</url>
    
    <content type="html"><![CDATA[<p>在关于less29配置已经介绍了关于双服务器。</p><h4 id="less-29"><a href="#less-29" class="headerlink" title="less-29"></a>less-29</h4><p>1.怎么确认是否是双服务器<br>我们先像简单的判断符号类型<br><img src="/2020/05/25/sqli-labs29-32/29-1.png" alt="Alt text"><br><img src="/2020/05/25/sqli-labs29-32/29-2.png" alt="Alt text"><br>两张对比图可以看出来，报错的页面其实被跳转到了jsp也就是tomcat服务器。<br>在这里双服务器也就进行了两次判断，在tomcat也就是我们输入的值，注入语句被提前检测。<br><img src="/2020/05/25/sqli-labs29-32/29-3.png" alt="Alt text"><br>第二个参数传入达到了我们前28关的思路。</p><h4 id="less-30"><a href="#less-30" class="headerlink" title="less-30"></a>less-30</h4><p>记得修改这关指向路劲哟~<br>1.判断注入类型以及是否存在括号<br><img src="/2020/05/25/sqli-labs29-32/30-1.png" alt="Alt text"><br>还是通过（“2”or“1”=“2”）判断<br>如果存在括号，那么布尔值被认定为1，如果不存在括号，那么就是2<br><img src="/2020/05/25/sqli-labs29-32/30-2.png" alt="Alt text"><br>这样就是有正确回显无错误回显的双引号注入。<br>2.预先确定注入方法：</p><ul><li>union（这道题优先）</li><li>盲注<h4 id="less-31"><a href="#less-31" class="headerlink" title="less-31"></a>less-31</h4></li></ul><p>1.判断注入类型<br><img src="/2020/05/25/sqli-labs29-32/31-1.png" alt="Alt text"><br>结论：双引号括号有两种回显，确定注入方法<br>2.构造注入语句<br><img src="/2020/05/25/sqli-labs29-32/31-2.png" alt="Alt text"></p><h4 id="less-32"><a href="#less-32" class="headerlink" title="less-32"></a>less-32</h4><p>宽字节过滤：在<strong>mysql使用的gdk</strong>中将两个字符看作一个汉字，第一个大于128。<br>我所理解的宽字节注入就是在符号被过滤的情况下，输入’但是执行过程中被转义，解决\带来的问题，所以添加%df就变成%df%5c%27,汉字占据两个字符，所以%27被保留。<br>1.确定注入类型<br><img src="/2020/05/25/sqli-labs29-32/32-1.png" alt="Alt text"><br>通过返回类型可以看出，实际上不是过滤，而是一种转义，所以可以使用宽字节注入。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sql29配置问题与双服务器理解</title>
    <link href="/2020/05/24/sql29%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <url>/2020/05/24/sql29%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="配置sqli-labs29（tomcat-phpstudy）"><a href="#配置sqli-labs29（tomcat-phpstudy）" class="headerlink" title="配置sqli-labs29（tomcat+phpstudy）"></a>配置sqli-labs29（tomcat+phpstudy）</h3><p>1.<strong>双服务器是什么？</strong><br><img src="/2020/05/24/sql29%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/%E5%8F%8C%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="Alt text"><em>此图来自mysql注入天书</em><br>服务器由tomcat和apache两部分：参数也是两部分，所以注入点出现变化。<br><img src="/2020/05/24/sql29%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%84%E7%90%86%E5%8F%82%E6%95%B0.png" alt="Alt text"><br>less29题的实际提供服务的是apache，所以数据处理的时候处理最后一个数据。</p><p>2.<strong>进行tomcat配置</strong><br>具体参考：<a href="https://www.cnblogs.com/limn/p/9358657.html" target="_blank" rel="noopener">win10 tomcat配置</a></p><p>3.<strong>less29配置</strong><br>在sqli-labs中还有一个tomcat-files.zip，解压到tomcat中的webapp文件夹中。<br><img src="/2020/05/24/sql29%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/%E9%85%8D%E7%BD%AE.png" alt="Alt text"><br>然后就可以开始使用了！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>http的学习笔记</title>
    <link href="/2020/04/29/http%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/04/29/http%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>请求包有请求头，响应头，普通头以及实体头</p><ul><li>请求头：</li></ul><p>1.host：主机号以及端口号<br>2.user-agent：客户端的浏览器信息<br>3.referer：用户从哪个url到当前位置的<br>4.cookie：请求者身份<br>5.range：实体<br>6：x-forword-for：请求ip<br>7.accept：能够接受怎样的信息</p><ul><li>响应头<br>1.server:服务器类型<br>2.last-modified：资源最后修改时间<br>refersh：定时刷新<ul><li>普通头<br>data  connect cache-control<br>实体头：内容</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sqli-labs通关11-28</title>
    <link href="/2020/04/25/sqli-labs11-28/"/>
    <url>/2020/04/25/sqli-labs11-28/</url>
    
    <content type="html"><![CDATA[<h4 id="总结前十关学到的内容："><a href="#总结前十关学到的内容：" class="headerlink" title="总结前十关学到的内容："></a>总结前十关学到的内容：</h4><p>对注入类型的判断：<br>1.单引号，双引号，无符号，括号等符号注入<br>2.报错注入：无信息内容返回，有错误信息返回，不同报错长度不同<br><strong>盲注</strong>：正确错误信息的返回情况<br>3.文件导出注入：没有信息返回，有错误信息省略提示。通过其他能够查出服务器文件储存的位置（权限，完整路径，在目标服务器，长度）<br>4.布尔盲注：有正确错误信息的反应<br>5.延时盲注：都是正确信息，只有通过if和sleep进行判断。</p><h4 id="less-11"><a href="#less-11" class="headerlink" title="less-11"></a>less-11</h4><p>这一关开始就是post类型了<br>1.审查提交元素名：<br><img src="/2020/04/25/sqli-labs11-28/11-1.png" alt="Alt text"><br>2.sql语句：<br>select username，password from users where uname=’$uname’&amp;password=’$passwd’<br>当注入以后#代表注释掉后面的内容就相当于不需要密码也能够进行登录。<br>3.判断查询字段数<br><img src="/2020/04/25/sqli-labs11-28/11-2.png" alt="Alt text"><br><img src="/2020/04/25/sqli-labs11-28/11-3.png" alt="Alt text"><br>能够通过order by判断一共查询的语句。<br>4.判断显示位<br><img src="/2020/04/25/sqli-labs11-28/11-4.png" alt="Alt text"><br>5.查询语句构造<br><img src="/2020/04/25/sqli-labs11-28/11-5.png" alt="Alt text"><br>6.查库名，表名，列名，数据信息。</p><h4 id="less-12"><a href="#less-12" class="headerlink" title="less-12"></a>less-12</h4><p>1.基本判断：<br><img src="/2020/04/25/sqli-labs11-28/12-1.png" alt="Alt text"><br>2.查询<br><img src="/2020/04/25/sqli-labs11-28/12-2.png" alt="Alt text"></p><h4 id="less-13"><a href="#less-13" class="headerlink" title="less-13"></a>less-13</h4><p>没有信息显示<br>![Alt text](./13-2 2.png)<br>但是出现错误信息提示<br>![Alt text](./13-2 1.png)<br>想到了报错注入<br><img src="/2020/04/25/sqli-labs11-28/13-3.png" alt="Alt text"><br>后面和less5一样了</p><h4 id="less-14"><a href="#less-14" class="headerlink" title="less-14"></a>less-14</h4><p>同13题没有信息输出，但是会报错<br><img src="/2020/04/25/sqli-labs11-28/14-1.png" alt="Alt text"><br>一开始进行报错注入很容易出错，括号，还有表<br>information_schema.<br>比如我查的是<br><img src="/2020/04/25/sqli-labs11-28/14-2.png" alt="Alt text"><br>剩余同上</p><h4 id="less-15"><a href="#less-15" class="headerlink" title="less-15"></a>less-15</h4><p>没有报错信息，只有正确信息提示和错误信息提示，<br>判断出是单引号的无显示注入<br><img src="/2020/04/25/sqli-labs11-28/15-1.png" alt="Alt text"><br>布尔盲注和延时盲注都可以<br>也可以判断一下对文件是否有操作<br><img src="/2020/04/25/sqli-labs11-28/15-2.png" alt="Alt text"><br>还可以进行文件导出注入。</p><h4 id="less-16"><a href="#less-16" class="headerlink" title="less-16"></a>less-16</h4><p><img src="/2020/04/25/sqli-labs11-28/16-1.png" alt="Alt text"><br>同样是布尔，文件，和延时</p><h4 id="less-17"><a href="#less-17" class="headerlink" title="less-17"></a>less-17</h4><p>通过测试可以看到uname的bug是不存在了<br>我们正确登录以后，出现这样的提示<br><img src="/2020/04/25/sqli-labs11-28/17-1.png" alt="Alt text"><br>说明只有登录名做了防护。<br>分析源代码中可以看到一些函数<br><img src="/2020/04/25/sqli-labs11-28/17-3.png" alt="Alt text"></p><ul><li>相关函数理解：<br>substr：进行值的截断前15个字符<br>get_magic_quotes_gpc()：接受已经转义处理的数据<br>addslashes() &amp; stripslashes()：处理预定义的字符，比如给单引号添加反斜杠<br>ctype_digit()：检测是否是正整数<br>mysql_real_escape_string()：转义特殊字符。<br>基本就是这道题不从这里入手的意思</li></ul><p>1,观察是否存在报错信息<br><img src="/2020/04/25/sqli-labs11-28/17-2.png" alt="Alt text"><br>2.分析注入类型<br>在之前基本都是作为查询信息出现的报错，而这一次在源码中密码部分是通过update进行的，所以使用报错语句要保证where后面有确定的对象。<br>less-5的是属于双注入<br><img src="/2020/04/25/sqli-labs11-28/17-4.png" alt="Alt text"><br>因为在less5里面是作为联合查询，字段数能够满足count还有concat，<br>但是在less17中，update使用的是and或者or，后面的子查询应该只能满足一个字段<br>这是子查询结果的情况<br><img src="/2020/04/25/sqli-labs11-28/17-5.png" alt="Alt text"><br>所以我理解为使用子查询会出现上图结果<br>使用派生表，则满足了字段数的要求。<br>3.构造语句<br><img src="/2020/04/25/sqli-labs11-28/17-6.png" alt="Alt text"><br>或者updatexml 和extractvalue</p><h4 id="less-18"><a href="#less-18" class="headerlink" title="less-18"></a>less-18</h4><p>http相关内容在另一篇博客</p><p>1.我们进行了基本判断，但是都不行，并且界面存在ip，输入正确信息返回值是自己的agent<br><img src="/2020/04/25/sqli-labs11-28/17-9.png" alt="Alt text"><br>2.因为确实不知道，所以看了源码<br>看到是将agent插入到表中（insert  delete  select update 都可以进行注入）<br>3.正确登录会反应我们需要的信息<br>![Alt text](./17-8 2.png)<br>![Alt text](./17-8 1.png)<br>接下来就是表，列，信息的读取</p><h4 id="less-19"><a href="#less-19" class="headerlink" title="less-19"></a>less-19</h4><p>正确登录，能够显示的内容为refere，进行注入判断。<br>剩下就是构造。<br><img src="/2020/04/25/sqli-labs11-28/19-1.png" alt="Alt text"></p><h4 id="less-20"><a href="#less-20" class="headerlink" title="less-20"></a>less-20</h4><p>通过正常输入内容可以得到两个数据<br>第一个是用户名和密码提交创建cookie<br>respose返回的是 i  love  your cookie，没有其他内容<br>创建好cookie以后就可以收到一个新的数据流。其中包含了cookie<br>正常的回显内容<br><img src="/2020/04/25/sqli-labs11-28/20-1.png" alt="Alt text"><br>所以可以知道源码先通过用户名密码创建好cookie，二次访问直接通过cookie访问。看过源码也就更能理解，在用户名密码是没有注入的。<br><img src="/2020/04/25/sqli-labs11-28/20-2.png" alt="Alt text"><br>使用union select还有报错注入都可以<br>and (select 1 from (select count(<em>),concat((select version()),floor(rand(0)</em>2))x from information_schema.tables group by x)a)<br><img src="/2020/04/25/sqli-labs11-28/20-4.png" alt="Alt text"></p><h4 id="less-21"><a href="#less-21" class="headerlink" title="less-21"></a>less-21</h4><p>一头雾水，一脸懵逼，看了源码才知道再知道是进行解码<br><img src="/2020/04/25/sqli-labs11-28/21-1.png" alt="Alt text"><br>只需要将想要输入的先加密，后面解码的时候就算是注入了。<br><img src="/2020/04/25/sqli-labs11-28/21-2.png" alt="Alt text"><br>其余还是和20一样的。</p><h4 id="less-22"><a href="#less-22" class="headerlink" title="less-22"></a>less-22</h4><p><img src="/2020/04/25/sqli-labs11-28/22-1.png" alt="Alt text"><br>双引号</p><h4 id="less-23"><a href="#less-23" class="headerlink" title="less-23"></a>less-23</h4><p>直接像less-1的url输入<br><img src="/2020/04/25/sqli-labs11-28/23-1.png" alt="Alt text"><br>但是在闭合过程中出现了符号失效<img src="/2020/04/25/sqli-labs11-28/23-2.png" alt="Alt text"> 源码中也可以看出来是对#和–+都进行了过滤。</p><p><strong>使用另外的过滤方式：</strong></p><ul><li>;%00:通过分号让程序以为结束了</li><li>and / or：and ‘1’=’1     or ‘ 1’ =’1(符号凑对)<br><img src="/2020/04/25/sqli-labs11-28/23-3.png" alt="Alt text"><br>和第一题一样，可以通过url/hackbar直接进行提交，也可以就开始习惯bp了</li></ul><p><strong>ps:</strong><br>bp使用过程需要知道url编码到服务器的转换过程<br>(在浏览器中使用的是正常的字符，在提交过程中会进行编码，bp抓取到的就是url编码以后的)<br>进行bp的修改需要输入符号的url编码，在服务器会进行解码处理。</p><h4 id="less-24"><a href="#less-24" class="headerlink" title="less-24"></a>less-24</h4><p><strong>二次排序注入：</strong>存储型注入，通过将恶意构造的字符存储到数据库，通过调用来进行sql语句的执行。<br>我们先任意输入注册一个用户，发现用户名可以任意输入：<img src="/2020/04/25/sqli-labs11-28/24-0.png" alt="Alt text"><br>用户创建成功以后，进入该用户修改密码<br><img src="/2020/04/25/sqli-labs11-28/24-2.png" alt="Alt text"><br>在这个时候会在数据库中查询，遇到语句为<br>UPDATE users SET passwd=”New_Pass” WHERE username =’ admin’#注释掉了后面的语句，会让数据库误以为我们是在修改admin账户从而达到注入的目的。<br><img src="/2020/04/25/sqli-labs11-28/24-1.png" alt="Alt text"><br>修改成功以后就能够使用admin和自己的密码进行登录。</p><h4 id="less-25"><a href="#less-25" class="headerlink" title="less-25"></a>less-25</h4><p>提示就说了and和or被过滤了<br>方法一：叠写<br>?id=1’ aandnd 1=(updatexml(1,concat(0x3a,(select user())),1))–+<br><img src="/2020/04/25/sqli-labs11-28/25-1.png" alt="Alt text"><br>方法二：大小写变形 Or,OR,oR<br>方法三：编码，hex，urlencode<br>方法四：添加注释/<em>or</em>/<br>方法五：利用符号 and=&amp;&amp; or=||<br>注入还是按照前面关卡一样</p><h4 id="less-25a"><a href="#less-25a" class="headerlink" title="less-25a"></a>less-25a</h4><ul><li>先进行符号判断，发现单引号等都不是，所以是无符号的类型</li><li>进行显示位的判断<br><img src="/2020/04/25/sqli-labs11-28/25a-2.png" alt="Alt text"></li><li>进行显示信息的判断中可以知道没有错误回显<img src="/2020/04/25/sqli-labs11-28/25a-1.png" alt="Alt text"><br>所以这道题可以采用的就是union并且进行and  or的绕过<h4 id="less-26"><a href="#less-26" class="headerlink" title="less-26"></a>less-26</h4></li><li>判断符号类型<img src="/2020/04/25/sqli-labs11-28/26-2.png" alt="Alt text"></li><li>进行注入语句构造，可以看到对空字符也进行了过滤<br><img src="/2020/04/25/sqli-labs11-28/26-1.png" alt="Alt text"><br><img src="/2020/04/25/sqli-labs11-28/26-3.png" alt="Alt text"><br>源码中也可以看出过滤了很多的符号其中也包含了空格。但是可以进行替换，注释符–+ 替换为;%00<br>空格可以替换为%a0.<img src="/2020/04/25/sqli-labs11-28/26-4.png" alt="Alt text"><br>或者<img src="/2020/04/25/sqli-labs11-28/26-5.png" alt="Alt text"><h4 id="less-26a"><a href="#less-26a" class="headerlink" title="less-26a"></a>less-26a</h4>这道题复习下基本注入的过程：</li></ul><p>1.进行注入类型的判定：<br><img src="/2020/04/25/sqli-labs11-28/26a-2.png" alt="Alt text"><br>只有单引号出现无显示，双引号正常显示，说明为单引号的注入类型<br>2.进行括号判定</p><ul><li>?id=2’ || ‘1’=’1：如果不存在括号<br>sql语句为：select * from users where id=’2’ || ‘1’=’0‘ 显示的就是为2的用户信息<br>如果存在括号<br>sql语句为：select * from users where id=（’2’||‘1’=‘1‘）结果判定为ture=1<br>所以是1用户的值。<br>![Alt text](./26a-1 2.png)<br>判定结果为存在括号</li></ul><p>3.构造注入语句：因为不存在报错信息，所以不能使用报错注入，可以进行盲注加绕过。<br>4.确定被过滤的字符进行绕过：<br>空格的替代符号<br>（%09   %0a   %0b  %0c  %0d  %a0）<br><img src="/2020/04/25/sqli-labs11-28/26a-4.png" alt="Alt text"><br>union select中间的空格替代符需要尝试，我这里只能使用%0和%a0.<br>5.在显示位上进行构造语句<br>####less-27</p><ul><li>判断注入类型以及是否具有括号<br><img src="/2020/04/25/sqli-labs11-28/27-1.png" alt="Alt text"></li><li>确定过滤的字符<br><img src="/2020/04/25/sqli-labs11-28/27-2.png" alt="Alt text"><br>通过显示可以看出，过滤union 以及select就是显示id=1的信息<br>手工确定过滤了union select –  // 以及空格</li><li>进行字符绕过<br>在测试过程中select进行了两次过滤<br><img src="/2020/04/25/sqli-labs11-28/27-3.png" alt="Alt text"><br>要么使用你进行三次叠写，要么编码绕过<br><img src="/2020/04/25/sqli-labs11-28/27-4.png" alt="Alt text"><h4 id="less-27a"><a href="#less-27a" class="headerlink" title="less-27a"></a>less-27a</h4>就是双引号的27题</li><li>判断注入类型是否存在括号<br><img src="/2020/04/25/sqli-labs11-28/27a-1.png" alt="Alt text"></li><li>确定被过滤的符号<br>空格 – union select //<br><img src="/2020/04/25/sqli-labs11-28/27a-2.png" alt="Alt text"><h4 id="less-28"><a href="#less-28" class="headerlink" title="less-28"></a>less-28</h4></li><li>判断注入类型，是否存在括号<br><img src="/2020/04/25/sqli-labs11-28/28-1.png" alt="Alt text"><br>结果显示是有正确显示的单引号括号注入</li><li>确定被过滤的符号—为空格</li><li>构造注入语句<br><img src="/2020/04/25/sqli-labs11-28/28-2.png" alt="Alt text"><h4 id="less-28a"><a href="#less-28a" class="headerlink" title="less-28a"></a>less-28a</h4></li><li>判断注入类型<br>单引号括号注入</li><li>确定被过滤符号<br><img src="/2020/04/25/sqli-labs11-28/28a-1.png" alt="Alt text">)<br>(concat_ws(0x7e,username,password)) %a0  from  %a0   (security.users)  limit %a0  3,1<br><img src="/2020/04/25/sqli-labs11-28/28a-2.png" alt="Alt text"></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql导出文件secure-file-priv配置问题</title>
    <link href="/2020/04/20/mysql%E9%85%8D%E7%BD%AEsecure-file-priv/"/>
    <url>/2020/04/20/mysql%E9%85%8D%E7%BD%AEsecure-file-priv/</url>
    
    <content type="html"><![CDATA[<p>###关于mysql配置secure-file-priv<br>查了很多资料，可以知道sqli-less7无法导出文件是因为my.ini的secure-file-priv参数。</p><p><strong>1.</strong>先打开mysql<br>用管理员身份打开cmd进入mysql/bin的目录<br>mysqld –install<br>mysqld –initialize-insecure<br>没有报错就说明对了</p><p><strong>2.</strong>net start mysql<br>mysql -uroot -proot</p><p><strong>3.</strong>show variables like ‘%secure%’<br>可以看到secure-file-priv的值为null</p><p><strong>4.</strong>打开my.ini<br>添加secure-file-priv=”/“保存，然后mysql退出去<br>net stop mysql<br>再打开查看，就可以了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sqli-labs通关1-10</title>
    <link href="/2020/04/19/sqli-labs1-10/"/>
    <url>/2020/04/19/sqli-labs1-10/</url>
    
    <content type="html"><![CDATA[<h3 id="sqli-labs通关手册"><a href="#sqli-labs通关手册" class="headerlink" title="sqli-labs通关手册"></a>sqli-labs通关手册</h3><p>主要记录自己的思路</p><h4 id="less-1"><a href="#less-1" class="headerlink" title="less-1"></a>less-1</h4><p>在url中输入？id=1显示的结果是正确的，所以进行报错处理<br><img src="/2020/04/19/sqli-labs1-10/2.png" alt="Alt text"></p><ul><li>输入？id=1’出现报错信息<br><img src="/2020/04/19/sqli-labs1-10/3.png" alt="Alt text"><br>源码分析<br>SELECT * FROM users WHERE id=’$id’ LIMIT 0,1</li></ul><p>SELECT * FROM users WHERE id=’1’’ LIMIT 0,1<br><img src="/2020/04/19/sqli-labs1-10/3.png" alt="Alt text"></p><ul><li>order by可以进行判断列数，也可以进行下一步直接猜。</li><li>开始爆出数据库（database（）、注释 –+）<br><img src="/2020/04/19/sqli-labs1-10/ddee.png" alt="Alt text"><br>查询列数不对，会报错<br><img src="/2020/04/19/sqli-labs1-10/wq.png" alt="Alt text"></li><li>information_schema表中存储着数据库所有信息，有information_schema.schemata中库名（schema_name），schema.tables表名（table_name），列名（）<br>SCHEMATA表：提供了当前mysql实例中所有数据库的信息。<br>TABLES表：提供了关于数据库中的表的信息（包括视图）。<br>COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。</li><li>查询数据库表名<br><img src="/2020/04/19/sqli-labs1-10/wwww.png" alt="Alt text"></li><li>查询库名table_schema=’security’<br><img src="/2020/04/19/sqli-labs1-10/qqqq.png" alt="Alt text"></li><li>查询表名和列名（因为显示位有两个，所以可以一起进行查询）<br><img src="/2020/04/19/sqli-labs1-10/UNZER3V7%60IH$EW1NY%5D6KI1I.png" alt="Alt text"></li><li>进行信息查询<br><img src="/2020/04/19/sqli-labs1-10/44H$%7BF6~O@L2G9WWHDR27DU.png" alt="Alt text"><h4 id="less-2"><a href="#less-2" class="headerlink" title="less-2"></a>less-2</h4>进行任意输入</li></ul><p>可以看出是存在报错，并且从报错信息可以看出错误的是单引号以后，却没有数字，那么就是无数字的注入类型</p><ul><li>进行显示位判断<br><img src="/2020/04/19/sqli-labs1-10/%60A@VDUR9R4C935%60E4599~TG.png" alt="Alt text"></li><li>数据库查询<br><img src="/2020/04/19/sqli-labs1-10/1SO~%7DJ74%7D4RYV1O6%5B89%60KKA.png" alt="Alt text"></li><li>进行表，列查询<img src="/2020/04/19/sqli-labs1-10/mmm.png" alt="Alt text"><br>其余和第一题没啥区别<h4 id="less-3"><a href="#less-3" class="headerlink" title="less-3"></a>less-3</h4><img src="/2020/04/19/sqli-labs1-10/4324.png" alt="Alt text"><br>从报错信息可以看出是单引号的括号类型格式<br><img src="/2020/04/19/sqli-labs1-10/212.png" alt="Alt text"><br>基本和less-1是一样的。<h4 id="less-4"><a href="#less-4" class="headerlink" title="less-4"></a>less-4</h4></li></ul><p><img src="/2020/04/19/sqli-labs1-10/qwq.png" alt="Alt text"><br>输入单引号并没有报出什么相关语法<br>试试双引号（一开始不要加–+，毕竟后面又括号，就没错了）<br><img src="/2020/04/19/sqli-labs1-10/Z5PL@N%7B%7BPU5L%7D%60BUNBILEH2.png" alt="Alt text"></p><p>这是加了注释的<br><img src="/2020/04/19/sqli-labs1-10/wqw.png" alt="Alt text"><br>进行基本操作<br><img src="/2020/04/19/sqli-labs1-10/ddd.png" alt="Alt text"></p><h4 id="less-5"><a href="#less-5" class="headerlink" title="less-5"></a>less-5</h4><p>前面已经学习了联合注入，单引号，双引号，第五题和前面不一样，因为它不显示数据<br><img src="/2020/04/19/sqli-labs1-10/ggg.png" alt="Alt text"></p><p><img src="/2020/04/19/sqli-labs1-10/222.png" alt="Alt text"><br>首先：报错注入就是根据错误进行信息查询<br><strong>floor()</strong>：<br>取小于等于的整数<br><strong>rand()</strong>：<br>生成随机数<br><strong>group by</strong>:<br>进行先排序再分组<br><strong>讲解：关于三者为什么会出现报错</strong>：<br>在官方文档中说明floor(rand())会被执行多次。<br>首先形成虚拟表，取值在虚拟表中对比是否存在，rand结果0不存在再次rand一下，1，然后插入虚拟表，第二次rand出现1，然而表中没有，再次rand结果为1，插入虚拟表，最后发生主键重复，所以报错了。<br>(1)floor报错：最长输出长度64<br>and select 1 from (select count(),concat(version(),floor(rand(0)2))x from information_schema.tables group by x)a);</p><p><strong>讲解：关于查询xml的报错方式</strong><br>(2). 通过updatexml报错<br>and updatexml(1,payload,1)最长输出32位<br>and 1=(updatexml(1,concat(0x3a,(select user())),1))</p><p>updatexml：更新xml文档函数，<br>update（文档，路径，新内容）<br>在路径要求是/，如果通过其他符号会直接报错<br>第三个方法也是同样的道理。</p><p>(3). 通过ExtractValue报错<br>and extractvalue(1, payload)<br>and extractvalue(1, concat(0x5c, (select table_name from information_schema.tables limit 1)));<br>payload返回类型不是xml格式才会生效<br>输出字符有长度限制，最长32位。</p><p>进行注入<br><img src="/2020/04/19/sqli-labs1-10/hx.png" alt="Alt text"><br>在database()输入想要的信息就可以了</p><h4 id="less-6"><a href="#less-6" class="headerlink" title="less-6"></a>less-6</h4><p> <img src="/2020/04/19/sqli-labs1-10/fl.png" alt="Alt text"><br> 双引号出现报错了<br> 剩下的和第五题同样了</p><h4 id="less-7"><a href="#less-7" class="headerlink" title="less-7"></a>less-7</h4><p>进行普通检查<br><img src="/2020/04/19/sqli-labs1-10/k.png" alt="Alt text"></p><p><img src="/2020/04/19/sqli-labs1-10/121.png" alt="Alt text"><br>现在可以猜应该是有单引号注入，没有直接回显只有通过–+进行确认。</p><p><strong>导出型注入</strong><br>要实现导出文件注入要满足文件在目标服务器上，自己具有文件的访问权，能够指定文件完整的路径，小于最大允许包大小</p><p><img src="/2020/04/19/sqli-labs1-10/I%5BD6KQXY2MI@N488%5DXSW5HT.png" alt="Alt text">按理来说应该是正确的，但是不对，说明注入不对。<br><img src="/2020/04/19/sqli-labs1-10/zd.png" alt="Alt text"><br>先判断自己对file的权限：<img src="/2020/04/19/sqli-labs1-10/%5D%5BH4RUQLE0ZSZ0CE8N%5BMZ@X.png" alt="Alt text"><br>现在开始进行into outfile /完整路径/<br><strong>这道题两大问题：</strong><br>1.设置MySQL的secure-file-priv<br>(另一篇博客)<br>2.服务器的默认完整路径（datadir （数据库文件路径）and basedir(安装路径))</p><p> <strong>into outfile</strong><br><img src="/2020/04/19/sqli-labs1-10/tz.png" alt="Alt text"><br>生成文件！搞定！<br><img src="/2020/04/19/sqli-labs1-10/xa.png" alt="Alt text"><br><strong>load data infile</strong><br>load_file(“文件的绝对路径”)：读取文件内容<br>但是我觉得一般正常注入没有得到权限前，这个不能使用</p><h4 id="less-8"><a href="#less-8" class="headerlink" title="less-8"></a>less-8</h4><p>从基本操作开始<br><img src="/2020/04/19/sqli-labs1-10/8-4.png" alt="Alt text"><br>只有输入单引号页面没有回显。</p><p>布尔盲注：通过页面反应来猜<br>?id=1’ and left((select database()),1)=’s’–+<br>left(字符串左边，1)第一个字符<br>开始使用sqlmap来猜吧<br>通过下面判断是否能布尔盲注<br><img src="/2020/04/19/sqli-labs1-10/8-3.png" alt="Alt text"><br><img src="/2020/04/19/sqli-labs1-10/111.png" alt="Alt text"><br><img src="/2020/04/19/sqli-labs1-10/8-2.png" alt="Alt text"><br><img src="/2020/04/19/sqli-labs1-10/8-1.png" alt="Alt text"></p><h4 id="less-9"><a href="#less-9" class="headerlink" title="less-9"></a>less-9</h4><p>这道题啥都没有显示，最后永假也说是对的。<br><img src="/2020/04/19/sqli-labs1-10/2ewdew.png" alt="Alt text"><br>所以只能通过浏览器反应时间了（时间延时盲注）<br>?id = 1’ and sleep3 –+来判断注入类型<br>关于if和sleep的使用<br>通过if判断满足条件的就能够进行sleep<br>?id=1’ and if(length(database())=4 , sleep(3), 1) –+<br>还是通过sqlmmap来操作吧<img src="/2020/04/19/sqli-labs1-10/9-1.png" alt="Alt text"></p><h4 id="less-10"><a href="#less-10" class="headerlink" title="less-10"></a>less-10</h4><p>同样进行时间盲注，但是通过判断是双引号类型<br>其余同第九题。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sql粗略笔记</title>
    <link href="/2020/04/19/sql%E7%B2%97%E7%95%A5%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/04/19/sql%E7%B2%97%E7%95%A5%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="sql注入前，语法复习"><a href="#sql注入前，语法复习" class="headerlink" title="sql注入前，语法复习"></a>sql注入前，语法复习</h4><p>重新梳理（关键字记得大写，sql不分，但是自己会好分点！！）</p><h5 id="sql：假装有一个表-user（name，id，age）"><a href="#sql：假装有一个表-user（name，id，age）" class="headerlink" title="sql：假装有一个表 user（name，id，age）"></a>sql：假装有一个表 user（name，id，age）</h5><ul><li>进入数据库 ：use 库名<ul><li>查询信息：SELECT  * FROM user；</li></ul></li><li>查询指定字段：SELECT  name ，id FROM user；</li><li>列去重（一列的数据有重复的，只想了解一列有哪些不同的）SELECT  DISTINCT id ，id FROM user；</li><li>where 语句：SELECT id from user where id = 2;<br><img src="/2020/04/19/sql%E7%B2%97%E7%95%A5%E7%AC%94%E8%AE%B0/1.png" alt="Alt text"></li><li>SQL的 AND  和 OR    ：如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。</li></ul><p>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。</p><ul><li>SQL ORDER BY 关键字<br>ORDER BY 关键字用于对结果集按照一个列或者多个列进行排序。<br>ORDER BY 关键字默认按照升序对记录进行排序。如果需要按照降序对记录进行排序，您可以使用 <strong>DESC</strong> 关键字。</li><li><strong>union</strong> ：SELECT a  FROM tables1 UNION SELECT b FROM table2；（UNION 内部的每个 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每个 SELECT 语句中的列的顺序必须相同）</li></ul><p><strong>函数部分</strong></p><ul><li>concat()  连接两个字符串（有的网站只能显示一行，就可以连接两个多个输出）</li><li>concat_ws(分隔符，str1，str2)</li><li>group by：语句用于结合合计函数，根据一个或多个列对结果集进行分组。</li><li>sleep(): 执行select sleep(N)可以让此语句运行N秒钟</li><li>left(): 返回最左边的n个字符的字符串str，或NULL如果任何参数是NULL。</li><li>COUNT:  count和distinct一起使用<br>COUNT(DISTINCT column_name)</li><li>FLOOR() - 返回最大整数</li><li>rand：用于产生 0 至 1 之间的随机数</li><li>length：返回字符串的长度，以字节为单位</li><li>EXTRACT() 函数用于返回日期/时间的单独部分，比如年、月、日、小时、分钟等等。</li><li>LIKE :进行匹配（SELECT * FEOM user_name where name like ‘a%’）<br>%代表0或者多个字符，_ 代替一个字符<br>[]charlist]  代表任何    ，   [!charlist]不在字符列表中的任何单一字符。</li><li>in ：允许在where的子句中规定多个值。</li><li>between  and :子句中的值有一定范围。（not between）</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>渗透大概思路</title>
    <link href="/2020/04/18/%E6%B8%97%E9%80%8F%E5%A4%A7%E6%A6%82%E6%80%9D%E8%B7%AF/"/>
    <url>/2020/04/18/%E6%B8%97%E9%80%8F%E5%A4%A7%E6%A6%82%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p>一. 信息收集：</p><ol><li>whois域名查询，网站注册者个人信息。</li><li>服务器旁站，子域名站点。（这一步是主站不好渗透的情况下）</li><li>服务器操作系统版本，中间件（看看有没有已知漏洞）</li><li>端口扫描（针对开放服务确定有没有可利用的，windows远程执行就是靠445）</li><li>扫描网站(看看有没有敏感文件，路径)<br>二.漏洞扫描：<br>进行漏洞检测（很多漏洞检测的工具比如xray啥的）暴力破解，sql注入，xss，代码执行，越权访问，文件包含、上传等等。<br>三.漏洞利用<br>确定了漏洞，就是为了权限，获取webshell等等<br>四.权限管理<br>五.日志清理<br>另一篇博客嘻嘻</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>渗透清理jio迹</title>
    <link href="/2020/04/18/%E6%B8%97%E9%80%8F%E6%B8%85%E7%90%86jio%E8%BF%B9/"/>
    <url>/2020/04/18/%E6%B8%97%E9%80%8F%E6%B8%85%E7%90%86jio%E8%BF%B9/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>owasp top 十大漏洞理解笔记</title>
    <link href="/2020/04/13/owasp%20top%20%E5%8D%81%E5%A4%A7%E6%BC%8F%E6%B4%9E%E7%90%86%E8%A7%A3%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/04/13/owasp%20top%20%E5%8D%81%E5%A4%A7%E6%BC%8F%E6%B4%9E%E7%90%86%E8%A7%A3%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>owasp （开放式web应用程序安全项目），总结了十项最严重的应用程序安全风险系列表</p><p>这是走安全最起码该了解的知识</p><h5 id="1-注入"><a href="#1-注入" class="headerlink" title="1.注入"></a>1.注入</h5><p>目前最常见的注入就是SQL注入，但是除了sql注入，还有nosal、os注入、LDAP注入。这些的函数和命令语法的缺陷进行的攻击。</p><ul><li><p><strong>原理</strong>：因为程序的判断不够严谨，渗透者利用不安全的命令作为查询对象，而解析器进行解析时，因为存在注入缺陷，将查询对象认为是命令或者因为闭合的语法问题，就会输出相关内容。</p></li><li><p><strong>危害</strong>：通过对数据库的猜解，用户信息的泄露，如果是超级用户，整个数据库都会被接手。</p></li></ul><ul><li><strong>造成原因</strong>：对输入的数据过滤不全，另一个就是没有对数据转义</li></ul><ul><li><p><strong>防范措施</strong>：</p><ul><li><p>对输入类型进行黑白名单</p></li><li><p>输入数据进行转义</p></li><li><p>数据过滤 注入主要使用的符号，比如单引号、双引号、逗号、冒号、反斜杠之类的进行转换或者过滤。</p></li></ul></li></ul><h5 id="2-失效身份认证和会话管理"><a href="#2-失效身份认证和会话管理" class="headerlink" title="2.失效身份认证和会话管理"></a>2.失效身份认证和会话管理</h5><ul><li><strong>原理</strong>：错误使用与身份认证和会话管理的应用程序，导致攻击者使用会话口令等进行暂时或者永久地冒充用户。</li></ul><ul><li><p><strong>危害</strong>：通过冒充正规用户从而进入操作其他的漏洞查找。</p></li><li><p><strong>造成原因</strong>：开发人员实现了很多的功能，比如：登录中的记住我，找回密码，更改密码验证太简单或者不验证，会话的时间限制。</p></li></ul><ul><li><p><strong>防范措施</strong>：</p><ul><li>定义会话管理</li><li>修改，更新密码进行验证</li><li>使用单一入口</li></ul></li></ul><h5 id="3-跨站xss"><a href="#3-跨站xss" class="headerlink" title="3.跨站xss"></a>3.跨站xss</h5><ul><li><p><strong>原理</strong>：利用浏览器对css的特性，将用户输入的内容显示在页面上，通过反弹的内容进而插入恶意代码，在点击页面时，执行相关的html代码，从而获取用户或者服务器的一些信息。xss分为存储型、反射型和基于DOM的。</p></li><li><p><strong>危害</strong>：破坏网站，重定向到攻击者指定站点，甚至xss拒绝服务攻击</p></li><li><p><strong>三种简介</strong>：</p><ul><li>存储型：用户输入存储在数据库中，比如留言板，站内消息，个人信息修改等</li><li>反射型：url在页面显示的功能点（站内查询点，搜索）</li><li>基于DOM：dom对象的页面程序（document。url等）</li></ul></li><li><p><strong>防范措施</strong>：对输入的数据进行检测，规定输入类型和进行编码等。</p></li></ul><h5 id="4-直接引用不安全的对象"><a href="#4-直接引用不安全的对象" class="headerlink" title="4.直接引用不安全的对象"></a>4.直接引用不安全的对象</h5><ul><li><p><strong>原理</strong>：公开了内部对象的引用情况，没有做访问控制等的检查，就会出现通过这些对象进行数据调用。</p></li><li><p><strong>防范措施</strong>：</p><ul><li>使用间接对象对数据进行调用</li><li>对直接对象调用进行访问控制</li></ul></li></ul><h5 id="5-安全配置错误"><a href="#5-安全配置错误" class="headerlink" title="5.安全配置错误"></a>5.安全配置错误</h5><ul><li><p><strong>原理</strong>：在很多的应用程序中，是会默认提供很多允许接口，一般是不会被重视，但是就给了攻击者攻击点。</p></li><li><p><strong>危害</strong>：攻击者通过默认的账户，端口，未使用的网页，未安装补丁的漏洞，都是攻击者访问文件目录的通道。</p></li><li><p><strong>防范措施</strong>：</p><ul><li>及时打补丁</li><li>尽可能使用更安全的应用程序</li></ul></li></ul><h5 id="6-敏感信息泄露"><a href="#6-敏感信息泄露" class="headerlink" title="6.敏感信息泄露"></a>6.敏感信息泄露</h5><ul><li><p><strong>原理</strong>：信息存储在数据库，数据库成为攻击的重点目标，脱库，卖库太多的手段，都是因为数据库的加密或者用户的自我意识。</p></li><li><p><strong>危害</strong>：信息泄露会让更多的东西被攻击者拿到</p></li><li><p><strong>防范措施</strong>：</p><ul><li>进行传输时，做好加密存储和传输。</li><li>选用更好的算法</li><li>禁用包含敏感信息的页面缓存</li></ul></li></ul><h5 id="7-缺少功能级的访问控制bun"><a href="#7-缺少功能级的访问控制bun" class="headerlink" title="7.缺少功能级的访问控制bun"></a>7.缺少功能级的访问控制bun</h5><ul><li><p><strong>原理</strong>：web程序中，有一部分的功能页面不需要进行验证就可以访问。</p></li><li><p><strong>危害</strong>：部分功能可能涉及超级管理员</p></li><li><p><strong>防范措施</strong>：</p><ul><li>进行明确权限划分</li><li>检查管理权限是否满足，不满足直接拒绝访问权限</li></ul></li></ul><h5 id="8-csrf"><a href="#8-csrf" class="headerlink" title="8.csrf"></a>8.csrf</h5><ul><li><p><strong>原理</strong>利用已登录的用户无意识下的操作，向服务器发送请求，从而实现攻击。</p></li><li><p><strong>危害</strong>：受害者的钱财丢失，信息泄露，甚至整个网站凉凉。</p></li><li><p><strong>防范措施</strong>：</p><ul><li>referer判断页面来源</li><li>功能型的验证请求</li><li>通过token进行csrf防护</li></ul></li></ul><h5 id="9-使用已知漏洞的组件"><a href="#9-使用已知漏洞的组件" class="headerlink" title="9.使用已知漏洞的组件"></a>9.使用已知漏洞的组件</h5><ul><li><p><strong>原理</strong>：应用程序使用的组件已经有漏洞存在漏洞库</p></li><li><p><strong>危害</strong>：攻击者通过漏洞库就可以知道哪些组件存在问题，直接通过该组件进行攻击</p></li><li><p><strong>防范措施</strong>：</p><ul><li>对组件进行了解</li><li>及时更新组件</li><li>建立安全策略来管理组建的使用</li></ul></li></ul><h5 id="10-未验证重定向和转发"><a href="#10-未验证重定向和转发" class="headerlink" title="10.未验证重定向和转发"></a>10.未验证重定向和转发</h5><ul><li><p><strong>原理</strong>：目标网站是通过未验证的参数指定，用户点击未经过验证的链接等，被重定向到恶意网站，或者安装恶意软件。</p></li><li><p><strong>危害</strong>：信息泄露</p></li><li><p><strong>防范措施</strong>：</p><ul><li>避免使用重定向</li><li>进行重定向或者转发是不涉及用户参数</li><li>确保目标参数值对当前用户是授权安全的。</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
